package com.fucongzheng.regularexpression;

public class Rule {
    public static void main(String[] args) {
        /*
        以下是Java正则表达式的详细规则介绍：

字符匹配：

普通字符：可以直接使用普通字符来匹配与之相同的单个字符。例如，正则表达式 "a" 可以匹配字符串中的字母 "a"。
元字符：具有特殊意义的字符，在正则表达式中有特定的用途。一些常见的元字符包括：
. （点号）：匹配除换行符外的任意单个字符。
*：匹配前面的元素零次或多次。
+：匹配前面的元素一次或多次。
?：匹配前面的元素零次或一次。
|：表示逻辑上的"或"操作，用于匹配多个模式中的一个。
()：创建一个分组，用于对相关模式进行组合或引用。
字符类：

方括号 []：用方括号括起来的字符类可匹配其中的任意一个字符。例如，正则表达式 "[abc]" 可以匹配字符串中的字母 "a"、"b" 或 "c"。
范围表示法：在方括号内使用连字符 (-) 来指定字符范围。例如，"[a-z]" 表示匹配任意小写字母。
预定义字符类：

\d：匹配一个数字字符（0-9）。
\D：匹配一个非数字字符。
\w：匹配一个字母、数字或下划线字符。
\W：匹配一个非字母、数字或下划线字符。
\s：匹配任意空白字符（空格、制表符、换行符等）。
\S：匹配任意非空白字符。
限定符：

*：匹配前面的元素零次或多次。
+：匹配前面的元素一次或多次。
?：匹配前面的元素零次或一次。
{n}：精确匹配前面的元素恰好 n 次。
{n,}：匹配前面的元素至少 n 次。
{n,m}：匹配前面的元素至少 n 次但不超过 m 次。
边界匹配：

^：匹配行的开头。
$：匹配行的结尾。
\b：匹配单词的边界。
转义字符：

在正则表达式中，某些字符具有特殊含义，如果需要匹配这些特殊字符本身，可以使用反斜杠进行转义。例如，要匹配字符 "."，需要使用 "."。
通过使用上述规则和语法元素，可以构建复杂的Java正则表达式来匹配和操作字符串。Java提供了Pattern和Matcher类，用于编译正则表达式并进行匹配操作。这些类提供了丰富的方法来执行模式匹配、捕获组和替换等操作。
         */
    }
}
